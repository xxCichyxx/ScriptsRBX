local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local isMonitoring = false
local isActive = false
local currentCar = nil
local car = nil  -- Zmienna przechowująca odwołanie do aktualnego pojazdu
local carPrimaryPart = nil

-- Określenie prędkości dla ruchu
local moveSpeed = 10  -- Zmniejszamy prędkość, by pojazd unosił się wolniej

-- Granica wysokości, do której pojazd się unosi
local minHeight = 4  -- Minimalna wysokość
local maxHeight = 5  -- Maksymalna wysokość

-- Funkcja do obliczania czasu trwania animacji na podstawie prędkości
local function calculateDuration(startPosition, endPosition, speed)
    local distance = (endPosition - startPosition).Magnitude  -- Obliczamy odległość pomiędzy punktami
    return distance / speed  -- Czas trwania animacji = odległość / prędkość
end

-- Funkcja do obracania kół na podstawie prędkości
local function rotateWheels(speed, duration)
    -- Określamy prędkość obrotu kół
    local wheelRotationSpeed = speed * 10  -- Zmieniaj wartość '10', aby dostosować prędkość obrotu

    -- Obrot kół na podstawie czasu trwania animacji
    if car then
        local wheels = {
            car.Wheels.BL,
            car.Wheels.BR,
            car.Wheels.FL,
            car.Wheels.FR,
        }
        
        for _, wheel in pairs(wheels) do
            local wheelRotation = wheel.RotVelocity
            wheelRotation = Vector3.new(0, wheelRotationSpeed, 0)  -- Obrót wokół osi Y
            wheel.RotVelocity = wheelRotation
        end
    end
end

-- Funkcja do unikania ruchu na boki i podnoszenia pojazdu
local function moveCarUpAndDown()
    while isActive do
        -- Pobieramy aktualną pozycję pojazdu
        local currentPosition = carPrimaryPart.Position
        local currentY = currentPosition.Y  -- Zachowujemy aktualną wysokość Y

        -- Zmieniamy wysokość na maxHeight, ale zachowujemy X, Z i rotację
        local targetPositionUp = Vector3.new(currentPosition.X, maxHeight, currentPosition.Z)

        -- Obliczamy czas trwania animacji z obecnej wysokości do nowej
        local durationUp = calculateDuration(currentPosition, targetPositionUp, moveSpeed)  -- Czas trwania animacji

        -- Tworzymy tween dla ruchu pojazdu w osi Y (tylko zmiana Y, X i Z bez zmian)
        local tweenInfoUp = TweenInfo.new(
            durationUp,  -- Czas trwania animacji
            Enum.EasingStyle.Linear,  -- Styl animacji
            Enum.EasingDirection.Out,  -- Kierunek animacji
            0,  -- Brak powtórzeń
            false,  -- Brak rewersowania
            0  -- Brak opóźnienia
        )

        -- Tworzymy tween na podstawie obecnego CFrame (zachowując rotację)
        local tweenUp = TweenService:Create(carPrimaryPart, tweenInfoUp, {
            CFrame = CFrame.new(targetPositionUp.X, targetPositionUp.Y, targetPositionUp.Z)
        })
        tweenUp:Play()
        tweenUp.Completed:Wait()  -- Czekamy na zakończenie animacji

        -- Obracamy koła na podstawie prędkości
        rotateWheels(moveSpeed, durationUp)

        -- Po uniesieniu na maksymalną wysokość, opadamy na minimalną wysokość
        local targetPositionDown = Vector3.new(currentPosition.X, minHeight, currentPosition.Z)
        local durationDown = calculateDuration(targetPositionUp, targetPositionDown, moveSpeed)  -- Czas opadania

        local tweenDown = TweenService:Create(carPrimaryPart, tweenInfoUp, {
            CFrame = CFrame.new(targetPositionDown.X, targetPositionDown.Y, targetPositionDown.Z)
        })
        tweenDown:Play()
        tweenDown.Completed:Wait()  -- Czekamy na zakończenie animacji

        -- Obracamy koła na podstawie prędkości
        rotateWheels(moveSpeed, durationDown)
    end
end

-- Funkcja wykrywająca, czy gracz wsiadł do pojazdu
local function detectVehicle()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    -- Sprawdzamy pojazdy w Workspace
    for _, car in pairs(workspace.Cars:GetChildren()) do
        local seat = car:FindFirstChild("Seats") and car.Seats:FindFirstChild("Driver")
        if seat then
            seat:GetPropertyChangedSignal("Occupant"):Connect(function()
                if seat.Occupant == humanoid then
                    print("Gracz wsiadł do pojazdu: " .. car.Name)
                    if not isActive then
                        isActive = true
                        currentCar = car
                        carPrimaryPart = car.PrimaryPart  -- Ustawiamy PrimaryPart pojazdu
                        coroutine.wrap(moveCarUpAndDown)()  -- Rozpoczynamy unoszenie i opadanie
                    end
                elseif seat.Occupant == nil then
                    if isActive and currentCar == car then
                        print("Gracz wysiadł z pojazdu: " .. car.Name)
                        isActive = false
                        currentCar = nil
                    end
                end
            end)
        end
    end
end

-- Funkcja uruchamiająca monitorowanie
local function startMonitoring()
    if isMonitoring then return end
    isMonitoring = true

    coroutine.wrap(function()
        while isMonitoring do
            detectVehicle()  -- Wykrywanie pojazdu
            wait(1)  -- Czekaj 1 sekundę między wykrywaniem
        end
    end)()
end

-- Funkcja zatrzymująca monitorowanie
local function stopMonitoring()
    isMonitoring = false
    isActive = false
    currentCar = nil
end

return {
    startMonitoring = startMonitoring,
    stopMonitoring = stopMonitoring
}

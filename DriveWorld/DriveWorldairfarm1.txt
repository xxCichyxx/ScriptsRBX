local TweenService = game:GetService("TweenService")

local isMonitoring = false
local isActive = false
local currentCar = nil
local moveCoroutine = nil

-- Parametry lotu i spadania
local maxHeight = 500  -- Maksymalna wysokość, na jaką ma polecieć pojazd
local initialRiseSpeed = 50  -- Początkowa prędkość unoszenia (w jednostkach na sekundę)
local gravityAcceleration = 10  -- Przyspieszenie grawitacyjne (prędkość spadania rośnie z każdą sekundą)

-- Funkcja do unoszenia pojazdu do góry
local function riseToMaxHeight(car)
    local carPrimaryPart = car.PrimaryPart
    local currentPosition = carPrimaryPart.Position  -- Aktualna pozycja pojazdu

    -- Unosimy pojazd w górę, aż osiągnie maksymalną wysokość
    while currentPosition.Y < maxHeight do
        currentPosition = currentPosition + Vector3.new(0, initialRiseSpeed * 0.1, 0)  -- Zwiększamy Y
        carPrimaryPart.CFrame = CFrame.new(currentPosition)  -- Teleportacja w górę
        wait(0.1)  -- Czekamy, aby ruch był płynny
    end

    -- Utrzymujemy pojazd na maksymalnej wysokości
    while isActive do
        currentPosition = Vector3.new(currentPosition.X, maxHeight, currentPosition.Z)
        carPrimaryPart.CFrame = CFrame.new(currentPosition)
        wait(0.1)  -- Utrzymywanie pozycji
    end
end

-- Funkcja symulująca spadanie bezwładne
local function simulateFall(car)
    local carPrimaryPart = car.PrimaryPart
    local currentFallSpeed = 0  -- Prędkość spadania (rozpoczyna się od 0)
    local currentPosition = carPrimaryPart.Position

    -- Dopóki pojazd nie osiągnie ziemi (0 na osi Y)
    while currentPosition.Y > 0 do
        -- Zwiększamy prędkość spadania (symulacja przyspieszenia)
        currentFallSpeed = currentFallSpeed + gravityAcceleration * 0.1  -- Przyspieszenie co 0.1 sekundy
        
        -- Nowa pozycja, teleportujemy pojazd w dół z rosnącą prędkością
        local targetPosition = Vector3.new(currentPosition.X, currentPosition.Y - currentFallSpeed, currentPosition.Z)

        -- Teleportacja
        carPrimaryPart.CFrame = CFrame.new(targetPosition)

        -- Aktualizacja obecnej pozycji
        currentPosition = targetPosition
        
        -- Czekamy krótki czas, aby stworzyć efekt spadania (przyspieszonego ruchu)
        wait(0.1)
    end
end

-- Funkcja do wykrywania pojazdu
local function detectVehicle()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    for _, car in pairs(workspace.Cars:GetChildren()) do
        local seat = car:FindFirstChild("Seats") and car.Seats:FindFirstChild("Driver")
        if seat then
            seat:GetPropertyChangedSignal("Occupant"):Connect(function()
                if not isMonitoring then return end
                if seat.Occupant == humanoid then
                    print("Gracz wsiadł do pojazdu: " .. car.Name)
                    if not isActive then
                        isActive = true
                        currentCar = car
                        moveCoroutine = coroutine.wrap(function()
                            while isActive do
                                local startPosition = riseToMaxHeight(car)  -- Pojazd leci do góry
                                simulateFall(car)  -- Gdy osiągnie maksymalną wysokość, zaczyna spadać
                                -- Po zakończeniu spadania wróci na wysokość 500 i zacznie znów lecieć
                            end
                        end)
                        moveCoroutine()
                    end
                elseif seat.Occupant == nil then
                    print("Gracz wysiadł z pojazdu: " .. car.Name)
                    -- Zatrzymanie tylko ruchu pojazdu, monitoring nadal trwa
                    isActive = false
                end
            end)
        end
    end
end

-- Funkcja do włączania monitoringu
local function startMonitoring()
    if isMonitoring then return end
    isMonitoring = true

    -- Ciągła pętla monitorująca pojazdy
    coroutine.wrap(function()
        while isMonitoring do
            detectVehicle()  -- Sprawdzaj pojazdy
            wait(1)  -- Czekaj 1 sekundę przed kolejnym sprawdzeniem
        end
    end)()
end

-- Funkcja do wyłączania monitoringu
local function stopMonitoring()
    isMonitoring = false
    isActive = false
    currentCar = nil

    if moveCoroutine then
        coroutine.yield(moveCoroutine)
        moveCoroutine = nil
    end
end

return {
    startMonitoring = startMonitoring,
    stopMonitoring = stopMonitoring,
}

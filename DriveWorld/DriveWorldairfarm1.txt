local function getSpecificParts(car)
    local parts = {}
    local function addPartsFromFolder(folder)
        if folder and folder:IsA("Folder") then
            for _, child in pairs(folder:GetChildren()) do
                if child:IsA("BasePart") then
                    table.insert(parts, child)
                end
            end
        end
    end
    local hitbox = car:FindFirstChild("Hitbox")
    local wheels = car:FindFirstChild("Wheels")
    local main = car:FindFirstChild("Main")
    if hitbox then addPartsFromFolder(hitbox) end
    if wheels then addPartsFromFolder(wheels) end
    if main and main:IsA("BasePart") then table.insert(parts, main) end
    return parts
end

local function startAutofarm(parts, player)
    local autofarmActive = true
    local maxHeight = 380
    local minHeight = 180
    local fallVelocity = -55
    local delayBetweenMoves = 0.05
    local function teleportPart(part)
        if not part:IsDescendantOf(workspace) then return end
        part.CFrame = CFrame.new(part.Position.X, maxHeight, part.Position.Z)
        while part.Position.Y > minHeight and autofarmActive do
            part.CFrame = CFrame.new(part.Position.X, part.Position.Y + fallVelocity * delayBetweenMoves, part.Position.Z)
            wait(delayBetweenMoves)
        end
        part.CFrame = CFrame.new(part.Position.X, maxHeight, part.Position.Z)
    end
    for _, part in pairs(parts) do
        coroutine.wrap(function()
            while autofarmActive do
                teleportPart(part)
                wait(delayBetweenMoves)
            end
        end)()
    end
    return function()
        autofarmActive = false
    end
end

local monitoringActive = false
local stopAutofarmFunc = nil

local function startMonitoring()
    monitoringActive = true
    for _, car in pairs(workspace.Cars:GetChildren()) do
        if not car:GetAttribute("AutofarmActivated") then
            car:SetAttribute("AutofarmActivated", false)
        end
        local seats = car:FindFirstChild("Seats")
        if seats then
            local driverSeat = seats:FindFirstChild("Driver")
            if driverSeat then
                driverSeat:GetPropertyChangedSignal("Occupant"):Connect(function()
                    local occupant = driverSeat.Occupant
                    if occupant then
                        local player = game.Players:GetPlayerFromCharacter(occupant.Parent)
                        if player and player == game.Players.LocalPlayer then
                            if not car:GetAttribute("AutofarmActivated") then
                                local parts = getSpecificParts(car)
                                stopAutofarmFunc = startAutofarm(parts, player)
                                car:SetAttribute("AutofarmActivated", true)
                                driverSeat:GetPropertyChangedSignal("Occupant"):Wait()
                                if not driverSeat.Occupant then
                                    stopAutofarmFunc()
                                end
                            end
                        end
                    end
                end)
            end
        end
    end
end

local function stopMonitoring()
    monitoringActive = false
    if stopAutofarmFunc then
        stopAutofarmFunc()
    end
end

return {
    startMonitoring = startMonitoring,
    stopMonitoring = stopMonitoring
}

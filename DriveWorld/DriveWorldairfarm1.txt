local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

local isMonitoring = false
local isActive = false
local currentCar = nil
local moveCoroutine = nil

-- Parametry wysokości
local minHeight = 250  -- Minimalna wysokość
local maxHeight = 550  -- Maksymalna wysokość

-- Funkcja do utrzymywania pojazdu na wysokości w zakresie (minHeight - maxHeight)
local function maintainHeight(car)
    local carPrimaryPart = car.PrimaryPart

    -- Ciągła pętla, dopóki jest aktywne monitorowanie
    while isActive do
        local currentPosition = carPrimaryPart.Position

        -- Obliczanie aktualnej wysokości i zapewnienie, że pojazd pozostanie w określonym zakresie
        local targetHeight = math.clamp(currentPosition.Y, minHeight, maxHeight)

        -- Ustawienie nowej pozycji z odpowiednią wysokością, ale ta sama X i Z
        local targetPosition = Vector3.new(currentPosition.X, targetHeight, currentPosition.Z)
        carPrimaryPart.CFrame = CFrame.new(targetPosition)  -- Teleportacja pojazdu

        -- Czekaj chwilę, zanim ponownie ustalisz wysokość
        wait(0.1)  -- Optymalizujemy czas oczekiwania, aby zmniejszyć obciążenie
    end
end

-- Funkcja do wykrywania pojazdu
local function detectVehicle()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    for _, car in pairs(workspace.Cars:GetChildren()) do
        local seat = car:FindFirstChild("Seats") and car.Seats:FindFirstChild("Driver")
        if seat then
            seat:GetPropertyChangedSignal("Occupant"):Connect(function()
                if seat.Occupant == humanoid then
                    print("Gracz wsiadł do pojazdu: " .. car.Name)
                    if not isActive then
                        isActive = true
                        currentCar = car
                        -- Tworzymy coroutine do utrzymywania wysokości
                        moveCoroutine = coroutine.wrap(function()
                            maintainHeight(car)
                        end)
                        moveCoroutine()  -- Uruchomienie coroutine
                    end
                elseif seat.Occupant == nil then
                    print("Gracz wysiadł z pojazdu: " .. car.Name)
                    -- Zatrzymanie tylko ruchu pojazdu, monitoring nadal trwa
                    isActive = false
                end
            end)
        end
    end
end

-- Funkcja do włączania monitoringu
local function startMonitoring()
    if isMonitoring then
        print("Monitoring już jest włączony")
        return  -- Jeśli monitoring jest już włączony, nie rób nic
    end

    isMonitoring = true
    print("Monitoring włączony")

    -- Ciągła pętla monitorująca pojazdy
    coroutine.wrap(function()
        while isMonitoring do
            detectVehicle()  -- Sprawdzaj pojazdy
            wait(1)  -- Czekaj 1 sekundę przed kolejnym sprawdzeniem
        end
    end)()
end

-- Funkcja do wyłączania monitoringu
local function stopMonitoring()
    if not isMonitoring then
        print("Monitoring już jest wyłączony")
        return  -- Jeśli monitoring jest już wyłączony, nie rób nic
    end

    print("Monitoring wyłączony")

    isMonitoring = false
    isActive = false
    currentCar = nil

    -- Zatrzymanie coroutine
    if moveCoroutine then
        coroutine.yield(moveCoroutine)
        moveCoroutine = nil
    end
end

return {
    startMonitoring = startMonitoring,
    stopMonitoring = stopMonitoring,
}
